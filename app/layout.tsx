'use client'
import './globals.css'
import Navbar from '../components/Navbar/Navbar'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { ThemeProvider as NextThemesProvider } from 'next-themes'
import { type ThemeProviderProps } from 'next-themes/dist/types'
import { Toaster } from '@/components/ui/toaster'
import { useEffect, useState } from 'react'
import dropdownContext from '../context/dropdownContext'
import userContext from '../context/userContext'
import historyContext from '../context/historyContext'

import { UserInterface } from '../context/userContext'
import { firebaseObject } from '../context/historyContext'

import clsx from 'clsx'
import Dailog from '@/components/Dailog/Dailog'
import { setCookie, parseCookies } from 'nookies'
import { getCookie } from '@/utils/getCookie'
import { COOKIE_KEYS } from '@/utils/cookieEnums'
import { useRouter } from 'next/navigation'

const inter = Inter({ subsets: ['latin'] })

function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const router = useRouter()
  // setting language and scripture state for Context
  const [language, setLanguage] = useState<string | null>('English')
  const [scripture, setScripture] = useState<string | null>(
    'Bhagavad Gita/ Hinduism',
  )
  // set user context state
  const [user, setUser] = useState<UserInterface | null>({
    email: '',
    image: '',
    name: '',
  })
  // set history context state
  const [history, setHistory] = useState<firebaseObject[] | null>(null)

  useEffect(() => {
    // checking if user in cookies
    const cookies = parseCookies()
    const data = cookies.user ? JSON.parse(cookies.user) : null
    if (data) {
      setUser({
        ...user,
        name: data.name,
        email: data.email,
        image: data.image,
      })
    }
    if (!data) {
      router.push('/login')
    }
  }, [])

  return (
    <html lang="en" suppressHydrationWarning>
      <body className={clsx(inter.className)}>
        <userContext.Provider value={{ user, setUser }}>
          <historyContext.Provider value={{ history, setHistory }}>
            <dropdownContext.Provider
              value={{ language, setLanguage, scripture, setScripture }}
            >
              <ThemeProvider attribute="class" defaultTheme="dark" enableSystem>
                <Navbar />
                {children}
                <Toaster />
              </ThemeProvider>
            </dropdownContext.Provider>
          </historyContext.Provider>
        </userContext.Provider>
      </body>
    </html>
  )
}
